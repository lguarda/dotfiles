# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="robbyrussell"

plugins=(zsh-autosuggestions git command-not-found autojump fzf sudo timer)
source $ZSH/oh-my-zsh.sh

# Appends every command to the history file once it is executed
setopt inc_append_history
# Reloads the history whenever you use it
setopt share_history
unsetopt listambiguous

export EDITOR="nvim"
alias vim="nvim"
unalias g
alias cm="cmake . --preset"
alias cb="cmake --build --preset"
alias re="realpath"
alias vimdiff="nvim -d"
alias vz="nvim $HOME/.zshrc"

alias gdbdash="ASAN_OPTIONS=detect_leaks=0 gdb -nh -ix ~/.config/gdb/gdbdashinit"
alias lsan="ASAN_OPTIONS=fast_unwind_on_malloc=0 LSAN_OPTIONS='max_leaks=1'"
alias lsanoff="ASAN_OPTIONS=detect_leaks=0"

function up-line-or-search-prefix () # smart up search (search in history anything matching before the cursor)
{
    local CURSOR_before_search=$CURSOR
    zle up-line-or-search "$LBUFFER"
    CURSOR=$CURSOR_before_search
}; zle -N up-line-or-search-prefix

function down-line-or-search-prefix () # same with down
{
    local CURSOR_before_search=$CURSOR
    zle down-line-or-search "$LBUFFER"
    CURSOR=$CURSOR_before_search
}; zle -N down-line-or-search-prefix

bindkey "^[[1;5A" up-line-or-search-prefix
bindkey "^[[1;5B" down-line-or-search-prefix
bindkey "^K" up-line-or-search-prefix
bindkey "^J" down-line-or-search-prefix
bindkey -M menuselect '^H' vi-backward-char
bindkey -M menuselect '^K' vi-up-line-or-history
bindkey -M menuselect '^L' vi-forward-char
bindkey -M menuselect '^J' vi-down-line-or-history

alias zz="source $HOME/.zshrc"

typeset -ga precmd_functions
rehash-last-install() { fc -l -1 |grep -q install && { echo "rehash-ing"; rehash } }
precmd_functions+=rehash-last-install

#0 -- vanilla completion (abc => abc)
#1 -- smart case completion (abc => Abc)
#2 -- word flex completion (abc => A-big-Car)
#3 -- full flex completion (abc => ABraCadabra)
zstyle ':completion:*' matcher-list \
  'm:{a-zA-Z}={A-Za-z}' \
  'r:[^[:alpha:]]||[[:alpha:]]=** r:|=* m:{a-z\-}={A-Z\_}' \
  'r:|?=** m:{a-z\-}={A-Z\_}'

function nbfile() {
    find "$1" -maxdepth 1 -type f | wc -l
}

if [[ ! -z $SSH_CONNECTION ]];then
 SSH_IP=$(echo $SSH_CONNECTION | cut -d\  -f3)
 PS1="[%{$fg[red]%}$SSH_IP%{$reset_color%}] $PS1"
fi

# fbr - checkout git branch
function fbr() {
  local branches branch
  branches=$(git branch --all -vv --color=always) &&
  branch=$(echo "$branches" | fzf --ansi --reverse --height=20 +m) &&
  if [ "$1" = "-f" ]; then
      git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //") --force
  else
      git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
  fi
}

# fshow - git commit browser
function fshowa() {
  git log --all --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --no-mouse --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --preview="(grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show % | delta --paging always') << 'FZF-EOF'
                {} FZF-EOF" \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show % | delta --paging always') << 'FZF-EOF'
                {} FZF-EOF"
}

# fshow - git commit browser
function fshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --no-mouse --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show % | delta --paging always') << 'FZF-EOF'
                {} FZF-EOF"
}

swap()
{
    local TMPFILE=tmp.$$
    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

colorize() {
    word=$(cat)
    h=$(echo $word | md5sum | head -c 2)
    h=$(( 40 + (16#$h % 80) * 2))
    printf "\x1b[38;5;%dm%s\x1b[0m" "$h" "$word"
}

colorize2() {
    h=$(echo $1 | md5sum | head -c 2)
    h=$(( 40 + (16#$h % 80) * 2))
    printf "\x1b[38;5;%dm%s\x1b[0m" "$h" "$1"
}


function c()                    # simple calculator
{
    echo $(($@));
}

function d2h()                  # decimal to hexa
{
    echo $(( [#16]$1 ));
}

function h2d()                  # hexa to decimal
{
    echo $(( 16#$1 ));
}

function d2b()                  # decimal to binary
{
    echo $(( [#2]$1 ));
}

function b2d()                  # binary to decimal
{
    echo $(( 2#$1 ));
}

function h2b()                  # hexa to binary
{
    echo $(( [#2]16#$1 ));
}

function b2h()                  # binary to hexa
{
    for i in $@;do
        echo $(( [#16]2#$i ));
    done
}

function h2o(){
  echo "ibase=16\nobase=8\n$1" | bc
}


function randpers() {
    VAR=$(echo $(($(echo $(( 16#$(sha1sum  <(head -c 10 /dev/urandom)  | cut -d\  -f1 | head -c 5) ))) % $#)))

    i=0
    for name in "$@"
    do
        if [[ $i == $VAR ]];then
            echo "$name"
        fi
        let i=i+1
    done
}

function ctrlz()
{
	if [[ $#BUFFER -ne 0 ]]; then
		zle push-input
	fi
	BUFFER=fg
	zle accept-line
}; zle -N ctrlz
bindkey "^Z" ctrlz
